/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package waitinglist;


import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

public class Find extends javax.swing.JFrame {
    
    /*
        Static variable
    */
    int waitingListCount = 0 ;
    int eligableListCount = 0 ;
//    static int availSeats = 0;
//    static int studentSelected = 0;
    static DefaultListModel waitingListModel = new DefaultListModel();
    static DefaultListModel eligibleListModel = new DefaultListModel();
    static DefaultListModel finalListModel = new DefaultListModel();
    
    static WLSWaitingTableModel waitingListTableModel = new WLSWaitingTableModel();
    static WLSEligibleTableModel eligibleListTableModel = new WLSEligibleTableModel();
    
    /** Creates new form Find */
    public Find() {
        initComponents();
        getCourses();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField6 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        CWIDLabel = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jOptionPane1 = new javax.swing.JOptionPane();
        seatsAvailLabel = new javax.swing.JLabel();
        seatsAvailTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jTextField6.setText("jTextField6");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jLayeredPane1Layout = new org.jdesktop.layout.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Waiting List Prioritizing Software");
        setAutoRequestFocus(false);
        setMinimumSize(new java.awt.Dimension(1024, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("0");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(180, 240, 50, 16);

        jButton1.setBackground(new java.awt.Color(0, 51, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setActionCommand("Enroll");
        jButton1.setLabel("Enroll");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(800, 610, 110, 29);

        jButton2.setBackground(new java.awt.Color(0, 51, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Prioritize");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(790, 400, 110, 29);

        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(280, 80, 430, 27);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(238, 238, 255));
        jLabel2.setText("Waiting List Prioritizing Software");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(350, 20, 320, 24);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Eligible students");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(90, 440, 105, 16);

        jTextField3.setBackground(new java.awt.Color(222, 223, 255));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField3);
        jTextField3.setBounds(150, 180, 190, 28);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Check", "CWID", "FName", "LName", "Unit completed", "Visa Status", "Current units"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
            jTable2.getColumnModel().getColumn(6).setResizable(false);
        }

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(90, 470, 820, 130);

        CWIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        CWIDLabel.setText("CWID");
        getContentPane().add(CWIDLabel);
        CWIDLabel.setBounds(110, 180, 34, 16);

        jButton3.setBackground(new java.awt.Color(0, 51, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(340, 180, 75, 29);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CWID", "FName", "LName", "Unit Completed", "Visa Status", "Current units"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
            jTable3.getColumnModel().getColumn(5).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(90, 260, 810, 130);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Waiting list");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(90, 240, 71, 16);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Course");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(210, 90, 60, 16);

        jButton4.setBackground(new java.awt.Color(0, 51, 102));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(690, 400, 84, 29);

        jButton5.setBackground(new java.awt.Color(0, 51, 102));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Sign out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(910, 10, 96, 29);

        jOptionPane1.setMessage("Are you sure you want to delete this students ? ");
        getContentPane().add(jOptionPane1);
        jOptionPane1.setBounds(0, 0, 0, 0);

        seatsAvailLabel.setForeground(new java.awt.Color(255, 255, 255));
        seatsAvailLabel.setText("Seats available");
        getContentPane().add(seatsAvailLabel);
        seatsAvailLabel.setBounds(190, 130, 92, 16);

        seatsAvailTextField.setBackground(new java.awt.Color(222, 223, 255));
        seatsAvailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatsAvailTextFieldActionPerformed(evt);
            }
        });
        seatsAvailTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                seatsAvailTextFieldKeyTyped(evt);
            }
        });
        getContentPane().add(seatsAvailTextField);
        seatsAvailTextField.setBounds(300, 130, 60, 28);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/waitinglist/WLS-Background.jpg"))); // NOI18N
        getContentPane().add(jLabel8);
        jLabel8.setBounds(190, 20, 350, 120);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/waitinglist/WLS-Background.jpg"))); // NOI18N
        jLabel3.setMaximumSize(new java.awt.Dimension(1024, 700));
        jLabel3.setMinimumSize(new java.awt.Dimension(1024, 700));
        jLabel3.setPreferredSize(new java.awt.Dimension(1024, 700));
        jLabel3.setSize(new java.awt.Dimension(1024, 700));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 1024, 700);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
        THis is Enroll button
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Students [] eligableList = getEligibleWaitingList();
        if ( eligableList.length == 0 ){
            System.out.println("No student in eligiable list, please check");
            JOptionPane.showMessageDialog(rootPane, "No student in eligiable list, please check", 
                        "Inane error", JOptionPane.WARNING_MESSAGE);
        }else if (Find.getAvailSeats() < Find.getStudentsSelected()){
            JOptionPane.showMessageDialog(rootPane, "You selected too much students than available,"
                    + "Please unselect some", 
                        "Inane error", JOptionPane.WARNING_MESSAGE);
        }else{
            try {     
                EnrollNew(eligableList);
            } catch (SQLException ex) {
                Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /*
        This one is Add button
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            
            String cwid = jTextField3.getText();

            Boolean findCwid = false;
            if (cwid.length() <= 0){
                JOptionPane.showMessageDialog(rootPane, "please enter the correct value");
            }else{
                //Check if insert sid exist in waiting list
                for (int i = 0; i < waitingListModel.getSize(); i++ ){
                    Students aStudent = (Students)waitingListModel.getElementAt(i);
                    if (aStudent.getCwid() == Integer.parseInt(cwid)){
                        findCwid = true;
                        System.out.println("Find something same");
                    }
                }
                if (findCwid == false){
                    Students aStudents = queryCwidFromDatabase(cwid);
                    if (aStudents != null){
                        waitingListModel.insertElementAt(aStudents, waitingListCount);
                        waitingListCount++;
                        waitingListTableModel.addRow(new Object[]{
                            aStudents.getCwid(), aStudents.getFName(), aStudents.getLName(), 
                            aStudents.getUnitsCompleted(), aStudents.getVisa(),
                            aStudents.getCurrentUnits()});
                        jTable3.setModel(waitingListTableModel);
                        //Clean text field
                        jTextField3.setText("");
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "CWID " + cwid + " does not exist, "
                                + "please enter the correct value");
                    }
                }else{
                    JOptionPane.showMessageDialog(rootPane, "CWID " + cwid + " already in list", 
                        "Inane error", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        }
        String counter = Integer.toString(waitingListCount) ;
        jLabel1.setText(counter);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
                 
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed
 
    /*
        This is perioritize button
    */
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        
        Students [] waitingList = getWaitingList();
        
        Classes abcTest = (Classes)jComboBox1.getSelectedItem();
        System.out.println("Perioritize - combobox : " + abcTest + ", seatsAvailTextField:");
        if (seatsAvailTextField.getText().length() == 0){
            JOptionPane.showMessageDialog(rootPane, "Input available seats", 
                    "Inane error", JOptionPane.INFORMATION_MESSAGE);
        }else if (jComboBox1.getSelectedItem() != null ){
//            availSeats = Integer.parseInt(seatsAvailTextField.getText());
            int availSeats = getAvailSeats();
            Students [] perioritizeList = perioritize(waitingList);
            eligibleListModel.removeAllElements();
            eligableListCount = 0;
            int countexistTable = eligibleListTableModel.getRowCount();
            System.out.println("the eligableListTableModel count : " + countexistTable);
            for (int i = countexistTable ; i > 0  ; i--){
                System.out.println("Remove : " + i);
                eligibleListTableModel.removeRow(i-1);
            }
            float lastWeight = 0;
            boolean isAdded = false;
            for (int i = 0; i < perioritizeList.length; i ++)
            {
                isAdded = false;
                Students aStudent = perioritizeList[i];
                if (eligableListCount < availSeats){
                    eligibleListModel.insertElementAt(aStudent, eligableListCount);
                    eligableListCount++;
                    eligibleListTableModel.addRow(new Object[]{aStudent.getSelected(), aStudent.getCwid(),
                        aStudent.getFName(), aStudent.getLName(), aStudent.getUnitsCompleted(),
                        aStudent.getVisa(), aStudent.getCurrentUnits()});
                    lastWeight = aStudent.getWeight();
                    isAdded = true;
                }
                //If next one weight == last one ... add to list
                if (lastWeight == aStudent.getWeight() && isAdded == false ){
                    System.out.println(" ===== Same weight ======= :  " + i);
                    eligibleListModel.insertElementAt(aStudent, eligableListCount);
                    eligableListCount++;
                    eligibleListTableModel.addRow(new Object[]{aStudent.getSelected(), aStudent.getCwid(),
                        aStudent.getFName(), aStudent.getLName(), aStudent.getUnitsCompleted(),
                        aStudent.getVisa(), aStudent.getUnitsCompleted()});
                    lastWeight = aStudent.getWeight();
                    isAdded = true;
                }
            }
            jTable2.setModel(eligibleListTableModel);
//            jTable2.getModel().addTableModelListener(new TableModelListener() {
//                @Override
//                public void tableChanged(TableModelEvent e) {
//                    System.out.println("Type: " + e.getType()+ ", TableModelListener somthing change !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//                    if (Find.getAvailSeats() <= Find.getStudentsSelected()){
//                        System.out.println("Do something~~~~~~");
//                    }
//                }
//            });
        }else{
            JOptionPane.showMessageDialog(rootPane, "Choose one course", 
                    "Inane error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Clean all models

        cleanALLModel();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
                public void run() {
                    dispose();
                    new LoginScreen().setVisible(true);
                }
            });      
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked

    }//GEN-LAST:event_jComboBox1MouseClicked
    /*
        This is courses comboBox
    */
    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
//            getCourses();
    }//GEN-LAST:event_jComboBox1FocusGained
    
    /*
        This is delete button
    */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int indexNew = jTable3.getSelectedRow();
        if (indexNew < 0){
            JOptionPane.showMessageDialog(rootPane, "You should choose one item", 
                    "Inane error", JOptionPane.WARNING_MESSAGE);
        }
        else{
            waitingListModel.removeElementAt(indexNew);
            waitingListCount--;
            jLabel1.setText(Integer.toString(waitingListCount));
            
            waitingListTableModel.removeRow(indexNew);
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))){
            System.out.println("Just number !!!!!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void seatsAvailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatsAvailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seatsAvailTextFieldActionPerformed

    private void seatsAvailTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatsAvailTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))){
            System.out.println("Just number !!!!!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_seatsAvailTextFieldKeyTyped
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Find.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginScreen().setVisible(true);
//                new Find().setVisible(true);
            }
        });
        
    }

    public boolean Login (String user , String pass){
          return false;
    }
    
    public void cleanALLModel(){
        waitingListCount = 0 ;
        eligableListCount = 0 ;
//        availSeats = 0;
        waitingListModel.removeAllElements();
        eligibleListModel.removeAllElements();
        finalListModel.removeAllElements();
        
        for (int i = waitingListTableModel.getRowCount() ; i > 0  ; i--){
//            System.out.println("Remove : " + i);
            waitingListTableModel.removeRow(i-1);
        }
        
        for (int i = eligibleListTableModel.getRowCount() ; i > 0  ; i--){
//            System.out.println("Remove : " + i);
            eligibleListTableModel.removeRow(i-1);
        }
    }
    
    public Students queryCwidFromDatabase(String aCwid) throws SQLException, ClassNotFoundException{
        Students aStudent = null;
        try (Connection con = DriverManager.getConnection(WLConfig.DB_URL, 
                WLConfig.databaseUser, WLConfig.databasePassword)) {
            java.sql.Statement st = con.createStatement();
            String sql = ("SELECT * FROM student WHERE cwid = "+aCwid+";");
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                 aStudent = new Students(
                        rs.getInt("cwid"),
                        rs.getNString("fname"),
                        rs.getNString("lname"),
                        rs.getInt("units_completed"),
                        rs.getInt("visa"),
                        rs.getInt("current_units"),
                        rs.getFloat("weight"));
            }
        }
        return aStudent;
    }
    
    /*
        This method is for get waiting list
    */
    public Students [] getWaitingList() {
        Students [] studentsArray = new Students[waitingListModel.getSize()];
        for ( int i = 0 ; i < waitingListModel.getSize() ; i++){
            studentsArray[i]  =  (Students)waitingListModel.getElementAt(i) ;
        }
        return studentsArray;
    }
    
    /*
        This method is for get eligable waiting list
    */
    public Students [] getEligibleWaitingList(){
        Students[] studentsArray = new Students[eligibleListModel.getSize()];
        int isSelectedCount = 0;
        finalListModel.removeAllElements();
        for ( int i = 0 ; i < eligibleListModel.getSize() ; i++){
            studentsArray[i] = (Students)eligibleListModel.getElementAt(i);
            if (studentsArray[i].getSelected()){
                System.out.println("eligible students : " + studentsArray[i].toString() + 
                        ", selected : " + studentsArray[i].getSelected());
                finalListModel.insertElementAt(studentsArray[i], isSelectedCount);
                isSelectedCount++;
            }
        }
        Students[] studentsFinalArray = new Students[finalListModel.getSize()];
        for ( int i = 0 ; i < finalListModel.getSize() ; i++){
            studentsFinalArray[i] = (Students)finalListModel.getElementAt(i);
        }
        
        return studentsFinalArray;
    }

    public Students [] perioritize (Students [] IDList) {
        
        Students[] studentArray = new Students[IDList.length];
        int [] unitcompleted  = new int[IDList.length];
        int [] visa  = new int[IDList.length];
        int [] currentunit  = new int[IDList.length];
        
        for ( int i = 0 ; i < IDList.length ; i ++ ){
            unitcompleted[i] = IDList[i].getUnitsCompleted();
            visa[i]          = IDList[i].getVisa();
            currentunit[i]   = IDList[i].getCurrentUnits();
        }
        studentArray = calculateWeight(IDList, unitcompleted, visa, currentunit);
        
        Arrays.sort(studentArray, Students.WeightComparator);
        System.out.println("Students list sorted by unitsCompleted:\n" + Arrays.toString(studentArray));
        
        return studentArray;
    }

    /*
        Calculate student's weight and store weight in student object
    */
    public Students[] calculateWeight (Students[] aStudentArray, int[] aList, int[] bList, int[] cList){
        Students[] studentArray = aStudentArray;
        int [] minMaxA = WLToolBox.getMaxMin(aList);
        int [] minMaxB = WLToolBox.getMaxMin(bList);
        int [] minMaxC = WLToolBox.getMaxMin(cList);
        
        for (int i = 0; i < studentArray.length ; i++){
            Students abc = studentArray[i];
            float weightResult = 
                    ( (float)( abc.getUnitsCompleted() - minMaxA[0] ) / minMaxA[2] ) * WLConfig.unitCompletedWeight+
                    ( (float)( abc.getVisa() - minMaxB[0] ) / minMaxB[2] ) * WLConfig.visaWeight +
                    ( (float)( abc.getCurrentUnits() - minMaxC[0] ) / minMaxC[2] * WLConfig.currentUnitsWeight);
            abc.setWeight(weightResult);
        }
        
        return studentArray;
    }
 
    public static int getAvailSeats (){
        return Integer.parseInt(seatsAvailTextField.getText());
    }
    
    public static int getStudentsSelected(){
        Students[] studentsArray = new Students[eligibleListModel.getSize()];
        int studentSelected = 0;
        for ( int i = 0 ; i < eligibleListModel.getSize() ; i++){
            studentsArray[i] = (Students)eligibleListModel.getElementAt(i);
            if (studentsArray[i].getSelected()){
//                System.out.println("eligible students : " + studentsArray[i].toString() + 
//                        ", selected : " + studentsArray[i].getSelected());
                studentSelected++;
            }
        }
        return studentSelected;
    }
    /**
     *
     */
    public void getCourses(){
        try {
            jComboBox1.removeAllItems();
            Classes[] classArray = getCoursesFromDatabase();
            for ( int i = 0 ; i < classArray.length ; i++){
                jComboBox1.addItem(classArray[i]);
            }  
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public  Classes[] getCoursesFromDatabase() throws ClassNotFoundException, SQLException{
        
        int queryCount = 0;
        Connection con = DriverManager.getConnection(WLConfig.DB_URL, 
                WLConfig.databaseUser, WLConfig.databasePassword);
        java.sql.Statement st2 = con.createStatement();
        String sql2 = ("SELECT * FROM Courses;");
        ResultSet rs2 = st2.executeQuery(sql2);
        Classes[] classArray = new Classes[WLToolBox.getDatabaseRowCount(rs2)];
        while (rs2.next()){
            classArray[queryCount] = new Classes(rs2.getString("CourseName"), 
                                        rs2.getInt("Section"),
                                        rs2.getString("SectionDetail"),
                                        rs2.getInt("ClassNumber"),
                                        rs2.getString("DayTime"),
                                        rs2.getString("Room"),
                                        rs2.getString("Instructor"),
                                        rs2.getString("MeetingDate"));
            
            queryCount++;
        }
        con.close();
        return classArray;
    }
    
    /*
        Step1. get list from eliable list
        Step2. retrieve information from db
        Step3. get selected course
        Step4. insert number of eliable students into selected course(table)
    */
    public Students [] EnrollNew (Students [] eligableList) throws SQLException{
        Classes aClass = (Classes)jComboBox1.getSelectedItem();
        System.out.println("Enroll - selected course : " + aClass.toString());
        JScrollPane scrollpane = new JScrollPane(); 
        ArrayList<String> categories = new ArrayList<String>();
        categories.add(aClass.toString());
        for (int i = 0 ; i < eligableList.length ; i++){
            categories.add(eligableList[i].print());
        }
        JList list = new JList(categories.toArray());
        scrollpane = new JScrollPane(list);
        JPanel panel = new JPanel(); 
        panel.add(scrollpane);
        scrollpane.getViewport().add(list);
        
        Object[] options = {"OK", "Cancel"};
        int n = JOptionPane.showOptionDialog(rootPane,//parent container of JOptionPane
            scrollpane,
            "Confirm enroll students list",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title
        System.out.println("you choose : " + n); //Canel --> 1, OK --> 0
        if (n == 0){ //
            writeDatabase(aClass, eligableList);
        }else{
            //do nothing....
        }
        return null;
    }

    public void writeDatabase (Classes aClass, Students[] eligableList) throws SQLException{

        try (Connection con = DriverManager.getConnection(WLConfig.DB_URL, 
                WLConfig.databaseUser, WLConfig.databasePassword)) {
            java.sql.Statement st = con.createStatement();
            
            String tableName = aClass.getShortName();
            String query = "DROP Table IF EXISTS " + tableName;
            st.executeUpdate(query);
            
            String sql = "CREATE TABLE " + tableName +  "(id INTEGER(9)not NULL)";
            st.executeUpdate(sql);
            
            for (int i = 0; i < eligableList.length ; i ++){
                String insert = "INSERT " + tableName + " VALUES(" + eligableList[i].getCwid() + ")";
                st.executeUpdate(insert);
            }
            con.close();
            //success to write database
            JOptionPane.showMessageDialog(rootPane, "Update class data success", 
                    "System Message", JOptionPane.PLAIN_MESSAGE);
        }
  
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CWIDLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JLabel seatsAvailLabel;
    private static javax.swing.JTextField seatsAvailTextField;
    // End of variables declaration//GEN-END:variables
    
}
